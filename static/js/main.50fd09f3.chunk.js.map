{"version":3,"sources":["mine/App.js","mine/actions/index.js","mine/reducer/listReducer.js","mine/reducer/index.js","index.js"],"names":["App","dispatch","useDispatch","itemList","useSelector","state","inputRef","React","createRef","renderedItemList","map","obj","ind","onClick","type","id","isDone","text","className","ref","current","value","items","listReducer","action","newState","produce","draftState","console","log","newState2","push","allReducer","combineReducers","myStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById"],"mappings":"+NAyDeA,MAjDf,WACC,IAAMC,EAAWC,cACXC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,YACxCG,EAAWC,IAAMC,YAUjBC,EAAmBN,EAASO,KAAK,SAACC,EAAIC,GAAL,OAAa,wBAAIC,QAAW,kBAAMZ,ECpBhE,CACNa,KAAM,SACNC,GDkB8FH,MAA7C,IAAuDD,EAAIK,OAAoB,2BAAIL,EAAIM,MAAnBN,EAAIM,KAAxE,QAElD,OACA,yBAAKC,UAAY,aAChB,yBAAKA,UAAY,OAChB,yBAAKA,UAAY,UACf,yCACA,4BACET,KAML,yBAAKS,UAAY,OAChB,yBAAKA,UAAY,UAChB,2BAAOJ,KAAK,OAAOK,IAAOb,KAE3B,yBAAKY,UAAY,UAChB,4BAAQA,UAAY,sBAAsBL,QAzB7C,WACCZ,ECPM,CACNa,KAAM,MACNG,KDKiBX,EAASc,QAAQC,QAClCf,EAASc,QAAQC,MAAQ,KAuBvB,QAEA,4BAAQH,UAAY,sBAAsBL,QAAW,kBAAMZ,EC1BvD,CACNa,KAAM,YDyBJ,c,4BEpCEQ,EAAQ,CACd,CAACL,KAAM,oBAAqBD,QAAQ,GACpC,CAACC,KAAM,wBAAyBD,QAAQ,GACxC,CAACC,KAAM,gCAAiCD,QAAQ,IAgCjCO,EA7BK,WAA4B,IAA3BlB,EAA0B,uDAAlBiB,EAAOE,EAAW,uCAC9C,OAAOA,EAAOV,MACb,IAAK,SACJ,IAAMW,EAAWC,YAAQrB,GAAO,SAAAsB,GAC5BA,EAAWH,EAAOT,IAAIC,QAAUW,EAAWH,EAAOT,IAAIC,UAI1D,OADAY,QAAQC,IAAIJ,GACLA,EAER,IAAK,MAEJ,GADAG,QAAQC,IAAI,iBACQ,KAAhBL,EAAOP,KAAa,CACvB,IAAMa,EAAYJ,YAAQrB,GAAO,SAAAsB,GAChCA,EAAWI,KAAK,CAACd,KAAMO,EAAOP,KAAKD,QAAO,OAE3C,OAAOc,EAIT,IAAK,QACJ,MAAO,GAER,QACC,OAAOzB,IC1BK2B,EALIC,YAAgB,CAClC9B,SAAWoB,ICINW,EAAUC,YAAYH,EAAWI,OAAOC,8BAAgCD,OAAOC,gCAErFC,IAASC,OAAQ,kBAAC,IAAD,CAAUC,MAASN,GAAS,kBAAC,EAAD,OAAkBO,SAASC,eAAe,W","file":"static/js/main.50fd09f3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//The Redux magic starts here. Access them anywhere directly without importting and stuff\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {toggleListItem, addItem, clearItems} from './actions'\r\n\r\n\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch()\r\n\tconst itemList = useSelector(state => state.itemList)\r\n\tlet inputRef = React.createRef()\r\n\r\n\r\n\t//Bruh.. very simple form handling. But don't overuse REF.\r\n\tfunction handleClick() {\r\n\t\tdispatch(addItem(inputRef.current.value))\r\n\t\tinputRef.current.value = \"\"\r\n\r\n\t}\r\n\r\n\tlet renderedItemList = itemList.map( (obj,ind) => <li onClick = {() => dispatch(toggleListItem(ind))}> {!obj.isDone ? obj.text : <s>{obj.text}</s>} </li>)\r\n\r\n\treturn(\r\n\t<div className = 'container'>\r\n\t\t<div className = 'row'>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t\t<h1> // TODO </h1>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{renderedItemList}\r\n\t\t\t\t\t\t\t \t\r\n\r\n\t\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div className = 'row'>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t<input type='text' ref = {inputRef}/>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t<button className = 'button button-clear' onClick = {handleClick}>ADD </button>\r\n\t\t\t\t\r\n\t\t\t\t<button className = 'button button-clear' onClick = {() => dispatch(clearItems())}>CLEAR </button>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\t \r\n\t\t</div> \r\n\r\n\r\n\t</div>\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App\t","export const toggleListItem = (id) => {\r\n\treturn {\r\n\t\ttype: \"TOGGLE\",\r\n\t\tid: id\r\n\t}\r\n\r\n}\r\n\r\nexport const addItem = (text) => {\r\n\treturn {\r\n\t\ttype: \"ADD\",\r\n\t\ttext: text\r\n\t}\r\n}\r\n\r\nexport const clearItems = () => {\r\n\treturn {\r\n\t\ttype: \"CLEAR\"\r\n\t}\r\n}","//create ACTUAL FUNCTIONS, with FuncitonalNaming\r\n//goddamn with immuatabilty bull\r\n\r\nimport produce from 'immer'\r\n\r\n\r\nconst items = [\r\n{text: \"Add a thing to do\", isDone: false},\r\n{text: \"Click on it when done\", isDone: true},\r\n{text: \"Use clear to start a new list\", isDone: false}\r\n]\r\n\r\nconst listReducer = (state = items, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase \"TOGGLE\":\r\n\t\t\tconst newState = produce(state, draftState => {\r\n\t\t\t    draftState[action.id].isDone = !draftState[action.id].isDone\r\n\t\t\t})\r\n\r\n\t\t\tconsole.log(newState)\r\n\t\t\treturn newState;\r\n\r\n\t\tcase \"ADD\":\r\n\t\t\tconsole.log(\"ADD REQUESTED\")\r\n\t\t\tif (action.text !== '') {\r\n\t\t\t\tconst newState2 = produce(state, draftState => {\r\n\t\t\t\t\tdraftState.push({text: action.text,isDone:false})\r\n\t\t\t\t})\r\n\t\t\t\treturn newState2\r\n\t\t\t}\r\n\r\n\r\n\t\tcase \"CLEAR\":\r\n\t\t\treturn []\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nexport default listReducer","import listReducer from './listReducer'\r\nimport {combineReducers} from 'redux'\r\n\r\n\r\n//Define the STORE/STATE/DB structure here.\r\nconst allReducer = combineReducers({\r\n\titemList : listReducer\r\n})\r\n\r\n\r\nexport default allReducer","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './mine/App.js'\nimport './index.css'\nimport './milligram.css' //okay\n\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport allReducer from './mine/reducer'\n\nconst myStore = createStore(allReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render( <Provider store = {myStore}><App/></Provider>,document.getElementById('root'))"],"sourceRoot":""}